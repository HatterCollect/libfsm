/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%prefixes%

	terminal = TOK_;
	function = p_;
	type     = t_;

%persistents%

	fsm       :fsm;
	flags     :flags;
	lex_state :lex_state;
	act_state :act_state;
	err       :err;

%maps%

%header% @{

	#include <assert.h>
	#include <limits.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <errno.h>
	#include <ctype.h>

	#include "libfsm/internal.h" /* XXX */

	#include <adt/bitmap.h>

	#include <fsm/fsm.h>
	#include <fsm/out.h>
	#include <fsm/options.h>

	#include <re/re.h>

	#include "libre/internal.h"

	#ifndef DIALECT
	#error DIALECT required
	#endif

	#define PASTE(a, b) a ## b
	#define CAT(a, b)   PASTE(a, b)

	#define LX_PREFIX CAT(lx_, DIALECT)

	#define LX_TOKEN   CAT(LX_PREFIX, _token)
	#define LX_STATE   CAT(LX_PREFIX, _lx)
	#define LX_NEXT    CAT(LX_PREFIX, _next)
	#define LX_INIT    CAT(LX_PREFIX, _init)

	#define DIALECT_COMP  CAT(comp_, DIALECT)
	#define DIALECT_GROUP CAT(group_, DIALECT)

	/* XXX: get rid of this; use same %entry% for all grammars */
	#define DIALECT_ENTRY       CAT(p_re__, DIALECT)
	#define DIALECT_GROUP_ENTRY CAT(p_group_H, DIALECT)

	#include "parser.h"
	#include "lexer.h"

	#include "../comp.h"
	#include "../group.h"

	typedef char     t_char;
	typedef unsigned t_unsigned;
	typedef unsigned t_pred; /* TODO */

	typedef struct lx_pos t_pos;
	typedef struct fsm_state * t_fsm__state;
	typedef struct re_grp t_grp;

	struct act_state {
		enum LX_TOKEN lex_tok;
		enum LX_TOKEN lex_tok_save;
		struct re_grp *g; /* for <stash-group> */
		int overlap; /* permit overlap in groups */

		/*
		 * A bitmap of the currently active capturing groups
		 * (0-indexed; bit 0 represents group 1).
		 * nmatch is the total number of capturing groups.
		 */
		matchset_t matches;
		unsigned nmatch;

		/*
		 * Lexical position stored for syntax errors.
		 */
		struct re_pos synstart;
		struct re_pos synend;

		/*
		 * Lexical positions stored for errors which describe multiple tokens.
		 * We're able to store these without needing a stack, because these are
		 * non-recursive productions.
		 */
		struct re_pos groupstart; struct re_pos groupend;
		struct re_pos rangestart; struct re_pos rangeend;
		struct re_pos countstart; struct re_pos countend;
	};

	struct lex_state {
		struct LX_STATE lx;
		struct lx_dynbuf buf; /* XXX: unneccessary since we're lexing from a string */

		int (*f)(void *opaque);
		void *opaque;

		struct {
			const char *pre;
			const char *post;
			enum { SHOVE_PRE, SHOVE_F, SHOVE_POST } state;
		} shove;

		/* TODO: use lx's generated conveniences for the pattern buffer */
		char a[512];
		char *p;
	};

	/*
	 * The matches bitmap is 0-indexed, so bit 0 represents group number 1.
	 * The maximum group number is however many bits fit in the bitmap.
	 */
	#define MATCH_BIT(n) (1 << ((n) - 1))
	#define MATCH_MAX (sizeof act_state->matches * CHAR_BIT)

	#define CURRENT_TERMINAL (act_state->lex_tok)
	#define ERROR_TERMINAL   @$ERROR
	#define ADVANCE_LEXER    do { mark(&act_state->synstart, &lex_state->lx.start); \
	                              mark(&act_state->synend,   &lex_state->lx.end);   \
	                              act_state->lex_tok = LX_NEXT(&lex_state->lx); } while (0)
	#define SAVE_LEXER(tok)  do { act_state->lex_tok_save = act_state->lex_tok; \
	                              act_state->lex_tok = tok;                     } while (0)
	#define RESTORE_LEXER    do { act_state->lex_tok = act_state->lex_tok_save; } while (0)

	static void
	mark(struct re_pos *r, const struct lx_pos *pos)
	{
		assert(r != NULL);
		assert(pos != NULL);

		r->byte = pos->byte;
	}

	/* TODO: centralise perhaps */
	static void
	snprintdots(char *s, size_t sz, const char *msg)
	{
		size_t n;

		assert(s != NULL);
		assert(sz > 3);
		assert(msg != NULL);

		n = sprintf(s, "%.*s", (int) sz - 3 - 1, msg);
		if (n == sz - 3 - 1) {
			strcpy(s + sz, "...");
		}
	}

	static void
	group_add(t_grp *g, char c)
	{
		assert(g != NULL);

		if (bm_get(&g->set, (unsigned char) c)) {
			bm_set(&g->dup, (unsigned char) c);
			return;
		}

		bm_set(&g->set, (unsigned char) c);
	}

	/* TODO: centralise */
	/* XXX: escaping really depends on dialect */
	static const char *
	escchar(char *s, size_t sz, int c)
	{
		size_t i;

		const struct {
			int c;
			const char *s;
		} a[] = {
			{ '\\', "\\\\" },

			{ '^',  "\\^"  },
			{ '-',  "\\-"  },
			{ ']',  "\\]"  },
			{ '[',  "\\["  },

			{ '\f', "\\f"  },
			{ '\n', "\\n"  },
			{ '\r', "\\r"  },
			{ '\t', "\\t"  },
			{ '\v', "\\v"  }
		};

		assert(s != NULL);
		assert(sz >= 5);

		(void) sz;

		for (i = 0; i < sizeof a / sizeof *a; i++) {
			if (a[i].c == c) {
				return a[i].s;
			}
		}

		if (!isprint((unsigned char) c)) {
			sprintf(s, "\\x%02X", (unsigned char) c);
			return s;
		}

		sprintf(s, "%c", c);
		return s;
	}

	static int
	escputc(int c, FILE *f)
	{
		char s[5];

		return fputs(escchar(s, sizeof s, c), f);
	}

	static int
	addedge_literal(struct fsm *fsm, enum re_flags flags,
		struct fsm_state *from, struct fsm_state *to, char c)
	{
		assert(fsm != NULL);
		assert(from != NULL);
		assert(to != NULL);

		if (flags & RE_ICASE) {
			if (!fsm_addedge_literal(fsm, from, to, tolower((unsigned char) c))) {
				return 0;
			}

			if (!fsm_addedge_literal(fsm, from, to, toupper((unsigned char) c))) {
				return 0;
			}
		} else {
			if (!fsm_addedge_literal(fsm, from, to, c)) {
				return 0;
			}
		}

		return 1;
	}

@}, @{

	#include <re/re.h>

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;

	typedef struct fsm *  fsm;
	typedef enum re_flags flags;
	typedef struct re_err * err;

@};

%terminals%

	INVERT: () -> (c :char) = @{
		@c = '^';
	@};

	RANGE: () -> (c :char, start :pos, end :pos) = @{
		@c = '-';
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	OPENGROUP: () -> (start :pos, end :pos) = @{
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	CLOSEGROUP: () -> (c :char, start :pos, end :pos) = @{
		@c = ']';
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	OPENCOUNT: () -> (start :pos, end :pos) = @{
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	CLOSECOUNT: () -> (start :pos, end :pos) = @{
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	ESC: () -> (c :char) = @{
		assert(lex_state->buf.a[0] == '\\');
		assert(lex_state->buf.a[1] != '\0');
		assert(lex_state->buf.a[2] == '\0');

		@c = lex_state->buf.a[1];

		switch (@c) {
		case 'f': @c = '\f'; break;
		case 'n': @c = '\n'; break;
		case 'r': @c = '\r'; break;
		case 't': @c = '\t'; break;
		case 'v': @c = '\v'; break;
		default:             break;
		}
	@};

	OCT: () -> (c :char, start :pos, end :pos) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\", 1));
		assert(strlen(lex_state->buf.a) >= 2);

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;

		errno = 0;

		u = strtoul(lex_state->buf.a + 1, &e, 8);

		if ((u == ULONG_MAX && errno == ERANGE) || u > UCHAR_MAX) {
			err->e = RE_EOCTRANGE;
			snprintdots(err->esc, sizeof err->esc, lex_state->buf.a);
			@!;
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err->e = RE_EXESC;
			@!;
		}

		@c = (char) (unsigned char) u;
	@};

	HEX: () -> (c :char, start :pos, end :pos) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\x", 2));
		assert(strlen(lex_state->buf.a) >= 3);

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;

		errno = 0;

		u = strtoul(lex_state->buf.a + 2, &e, 16);

		if ((u == ULONG_MAX && errno == ERANGE) || u > UCHAR_MAX) {
			err->e = RE_EHEXRANGE;
			snprintdots(err->esc, sizeof err->esc, lex_state->buf.a);
			@!;
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err->e = RE_EXESC;
			@!;
		}

		@c = (char) (unsigned char) u;
	@};

	CHAR: () -> (c :char, start :pos, end :pos) = @{
		assert(lex_state->buf.a[0] != '\0');
		assert(lex_state->buf.a[1] == '\0');

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;

		@c = lex_state->buf.a[0];
	@};

	START: () -> (p :pred) = @{
		switch (flags & RE_ANCHOR) {
		case RE_TEXT:  @p = RE_SOT; break;
		case RE_MULTI: @p = RE_SOL; break;
		case RE_ZONE:  @p = RE_SOZ; break;

		default:
			/* TODO: raise error */
			@p = 0U;
		}
	@};

	END: () -> (p :pred) = @{
		switch (flags & RE_ANCHOR) {
		case RE_TEXT:  @p = RE_EOT; break;
		case RE_MULTI: @p = RE_EOL; break;
		case RE_ZONE:  @p = RE_EOZ; break;

		default:
			/* TODO: raise error */
			@p = 0U;
		}
	@};

	COUNT: () -> (n :unsigned) = @{
		unsigned long u;
		char *e;

		u = strtoul(lex_state->buf.a, &e, 10);

		if ((u == ULONG_MAX && errno == ERANGE) || u > UINT_MAX) {
			err->e = RE_ECOUNTRANGE;
			snprintdots(err->esc, sizeof err->esc, lex_state->buf.a);
			@!;
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err->e = RE_EXCOUNT;
			@!;
		}

		@n = (unsigned int) u;
	@};

%actions%

	/*
	 * These are parser actions common to all grammars provided by libre.
	 * Globs use only a few of the available actions; regexps use most.
	 *
	 * In some cases (e.g. counting) actions are centralised here for
	 * the sake of DRY, at the expense of slight overkill.
	 */

	<make-states>: () -> (x :fsm_state, y :fsm_state) = @{
		assert(fsm != NULL);
		/* TODO: assert fsm is empty */

		@x = fsm_getstart(fsm);
		assert(@x != NULL);

		@y = fsm_addstate(fsm);
		if (@y == NULL) {
			@!;
		}

		fsm_setend(fsm, @y, 1);
	@};


	<make-group>: () -> (g :grp) = @{
		bm_clear(&@g.set);
		bm_clear(&@g.dup);
	@};

	<invert-group>: (g :grp &) -> () = @{
		/*
		 * The bm struct is limited to 0..UCHAR_MAX only; special edges up to
		 * FSM_EDGE_MAX are not present, and so do not get inverted here.
		 */
		bm_invert(&@&g->set);

		/*
		 * Note we don't invert the dup set here; duplicates are always
		 * kept in the positive.
		 */
	@};

	<stash-group>: (g :grp &) -> () = @{
#define PARSE_GROUP

		if (!act_state->overlap && bm_count(&@&g->dup) > 0) {
			err->e  = RE_EOVERLAP;

			/* TODO: would like to show the original spelling verbatim, too */

			if (-1 == bm_snprint(&@&g->set, err->set, sizeof err->set, 1, escputc)) {
				err->e = RE_EERRNO;
				@!;
			}

			if (-1 == bm_snprint(&@&g->dup, err->dup, sizeof err->dup, 1, escputc)) {
				err->e = RE_EERRNO;
				@!;
			}

			@!;
		}

		*act_state->g = *@&g;
	@};

	<group-add-char>: (g :grp &, c :char) -> () = @{
		group_add(@&g, @c);
	@};

	<group-add-range>: (g :grp &, a :char, b :char) -> () = @{
		int i;

		if ((unsigned char) @b < (unsigned char) @a) {
			char a[5], b[5];

			assert(sizeof err->set >= 1 + sizeof a + 1 + sizeof b + 1 + 1);

			sprintf(err->set, "[%s-%s]",
				escchar(a, sizeof a, @a), escchar(b, sizeof b, @b));
			err->e = RE_ENEGRANGE;
			@!;
		}

		for (i = (unsigned char) @a; i <= (unsigned char) @b; i++) {
			group_add(@&g, (char) i);
		}
	@};

	<group-to-states>: (g :grp &, x :fsm_state, y :fsm_state) -> () = @{
		int i;

		if (!act_state->overlap && bm_count(&@&g->dup) > 0) {
			err->e  = RE_EOVERLAP;

			/* TODO: would like to show the original spelling verbatim, too */

			if (-1 == bm_snprint(&@&g->set, err->set, sizeof err->set, 1, escputc)) {
				err->e = RE_EERRNO;
				@!;
			}

			if (-1 == bm_snprint(&@&g->dup, err->dup, sizeof err->dup, 1, escputc)) {
				err->e = RE_EERRNO;
				@!;
			}

			@!;
		}

		/* TODO: eventually libfsm will provide a neater mechanism here */

		i = -1;
		while (i = (int) bm_next(&@&g->set, i, 1), i <= UCHAR_MAX) {
			if (!addedge_literal(fsm, flags, @x, @y, (char) i)) {
				@!;
			}
		}
	@};


	/*
	 * The following regular expression fragments map to associated fsm states
	 * as follows (transitions written in .fsm format):
	 *
	 *  ab    add-concat:  1 -> 3 "a"; 3 -> 2 "b";
	 *  a|b   add-alt:     1 -> 2 "a"; 1 -> 2 "b";
	 *  (a)   add-sub:     1 -> 1a; 2a -> 2;
	 *  [abc] add-group:   1 -> 2 "a"; 1 -> 2 "b"; 1 -> 2 "c";
	 *  a     add-literal: 1 -> 1a; 2a -> 2;
	 *  .     add-any:     1 -> 2 ?;
	 *
	 * Each of these component parts has exactly one input (1) and exactly one
	 * output state (2).
	 * TODO: say that these correspond to "x" and "y"
	 * TODO: explain that these are stacklike
	 * TODO: update these comments
	 */

	<add-concat>: () -> (s :fsm_state) = @{
		@s = fsm_addstate(fsm);
		if (@s == NULL) {
			@!;
		}
	@};

	<add-epsilon>: (x :fsm_state, y: fsm_state) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			@!;
		}
	@};

	<add-pred>: (x :fsm_state, y :fsm_state, p :pred) -> () = @{
		assert(@x != NULL);
		assert(@y != NULL);

/* TODO:
		if (!fsm_addedge_predicate(fsm, @x, @y, @p)) {
			@!;
		}
*/
	@};

	<add-literal>: (x :fsm_state, y :fsm_state, c :char) -> () = @{
		assert(@x != NULL);
		assert(@y != NULL);

		/* TODO: check c is legal? */

		if (!addedge_literal(fsm, flags, @x, @y, @c)) {
			@!;
		}
	@};

	<add-any>: (x :fsm_state, y :fsm_state) -> () = @{
		assert(@x != NULL);
		assert(@y != NULL);

		if (!fsm_addedge_any(fsm, @x, @y)) {
			@!;
		}
	@};

	<capture-set>: () -> (n :unsigned) = @{
		if (fsm->opt != NULL && fsm->opt->capture) {
			assert(act_state->nmatch <= MATCH_MAX);

			if (act_state->nmatch == MATCH_MAX) {
				err->e = RE_ENMATCHES;
				@!;
			}

			@n = ++act_state->nmatch;

			assert(~act_state->matches & MATCH_BIT(@n));

			act_state->matches |=  MATCH_BIT(@n);
		}
	@};

	<capture-unset>: (n :unsigned) -> () = @{
		if (fsm->opt != NULL && fsm->opt->capture) {
			assert(@n <= MATCH_MAX);
			assert((act_state->matches & MATCH_BIT(@n)) != 0);

			act_state->matches &= ~MATCH_BIT(@n);
		}
	@};

	/*
	 * The following count repetition operators encapsulate regular expression
	 * fragments as follows (transitions written in .fsm format where 1a and 2a
	 * indicate the a'th occurance of the input and output states 1 and 2 from
	 * the fragment):
	 *
	 *  a{n} count-n:         8 -> 1a; 2a -> 1b; 2b -> ...a; ...b -> na; nb -> 9;
	 *  a?   count-0-or-1:    8 -> 1a; 2a -> 9; 8 -> 9;
	 *  a*   count-0-or-many: 8 -> 1a; 2a -> 9; 8 -> 9; 9 -> 8;
	 *  a+   count-1-or-many: 8 -> 1a; 2a -> 9;         9 -> 8;
	 *  a    count-1:         8 -> 1a; 2a -> 9;
	 *
	 * Each of these component parts has exactly one input (8) and exactly one
	 * output state (9). Between these states are an appropiate number of
	 * regex fragments as per <add-*> which begin and end (1) and (2). Each of
	 * these pairs is lettered a, b, ..., n for ease of identification.
	 *
	 * TODO: update for count-m-n
	 */

	<count-m-to-n>: (x :fsm_state, y :fsm_state &, m :unsigned, n :unsigned) -> () = @{
		unsigned i;
		struct fsm_state *a;
		struct fsm_state *b;

		if (@n < @m) {
			err->e = RE_ENEGCOUNT;
			err->m = @m;
			err->n = @n;
			@!;
		}

		if (@m == 0) {
			if (!fsm_addedge_epsilon(fsm, @x, @y)) {
				@!;
			}
		}

		b = @y;

		for (i = 1; i < @n; i++) {
			a = fsm_state_duplicatesubgraphx(fsm, @x, &b);
			if (a == NULL) {
				@!;
			}

			/* TODO: could elide this epsilon if fsm_state_duplicatesubgraphx()
			 * took an extra parameter giving it a m->new for the start state */
			if (!fsm_addedge_epsilon(fsm, @y, a)) {
				@!;
			}

			if (i >= @m) {
				if (!fsm_addedge_epsilon(fsm, @y, b)) {
					@!;
				}
			}

			@=y = b;
			@x = a;
		}
	@};

	<count-0-or-1>: (x :fsm_state, y :fsm_state) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			@!;
		}
	@};

	<count-0-or-many>: (x :fsm_state, y :fsm_state &) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			@!;
		}

		if (!fsm_addedge_epsilon(fsm, @y, @x)) {
			@!;
		}

		/* isolation guard */
		/* TODO: centralise */
		{
			struct fsm_state *z;

			z = fsm_addstate(fsm);
			if (z == NULL) {
				@!;
			}

			if (!fsm_addedge_epsilon(fsm, @y, z)) {
				@!;
			}

			@=y = z;
		}
	@};

	<count-1-or-many>: (x :fsm_state, y :fsm_state &) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @y, @x)) {
			@!;
		}

		/* isolation guard */
		/* TODO: centralise */
		{
			struct fsm_state *z;

			z = fsm_addstate(fsm);
			if (z == NULL) {
				@!;
			}

			if (!fsm_addedge_epsilon(fsm, @y, z)) {
				@!;
			}

			@=y = z;
		}
	@};

	<count-1>: (x :fsm_state, y :fsm_state) -> () = @{
		(void) @x;
		(void) @y;
	@};


	<err-expected-term> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXTERM;
		}
	@};

	<err-expected-count> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXCOUNT;
		}
	@};

	<err-expected-atoms> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXATOMS;
		}
	@};

	<err-expected-alts> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXALTS;
		}
	@};

	<err-expected-range> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXRANGE;
		}
	@};

	<err-expected-closegroup> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXCLOSEGROUP;
		}
	@};

	<err-expected-groupbody> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXGROUPBODY;
		}
	@};

	<err-expected-eof> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXEOF;
		}
	@};

	<mark-begin>: () -> (pos :pos) = @{
		@pos.byte = 0;
		@pos.line = 1;
		@pos.col  = 1;
	@};

	<mark-end>: () -> (pos :pos) = @{
		/*
		 * Assuming <mark-end> is called when there are no more tokens,
		 * the end of the lexical stream is the end of the current token.
		 */
		@pos.byte = act_state->synend.byte;
		@pos.line = 0; /* dummy */
		@pos.col  = 0; /* dummy */
	@};

	<mark-group>: (start :pos, end :pos) -> () = @{
		mark(&act_state->groupstart, &@start);
		mark(&act_state->groupend,   &@end);
	@};

	<mark-range>: (start :pos, end :pos) -> () = @{
		mark(&act_state->rangestart, &@start);
		mark(&act_state->rangeend,   &@end);
	@};

	<mark-count>: (start :pos, end :pos) -> () = @{
		mark(&act_state->countstart, &@start);
		mark(&act_state->countend,   &@end);
	@};

%trailer% @{

	static int
	lgetc(struct LX_STATE *lx)
	{
		struct lex_state *lex_state;

		assert(lx != NULL);
		assert(lx->opaque != NULL);

		lex_state = lx->opaque;

		assert(lex_state->f != NULL);

		return lex_state->f(lex_state->opaque);
	}

#ifdef PARSE_GROUP
	static int
	lshovec(struct LX_STATE *lx)
	{
		struct lex_state *lex_state;
		int c;

		assert(lx != NULL);
		assert(lx->opaque != NULL);

		lex_state = lx->opaque;

		assert(lex_state->shove.pre  != NULL);
		assert(lex_state->shove.post != NULL);

		/*
		 * Characters are shoved into the input stream by a cheesy FSM which walks
		 * three input sources in turn; a string to prepend, the lgetc stream,
		 * and a string to append after the lgetc stream.
		 * These strings needn't be spellings for complete tokens.
		 */

		/* XXX: pos will be wrong! decrement it. as if our shoved character didn't exist */

		for (;;) {
			switch (lex_state->shove.state) {
			case SHOVE_PRE:
				c = *lex_state->shove.pre;
				if (c == '\0') {
					lex_state->shove.state = SHOVE_F;
					continue;
				}

				lex_state->shove.pre++;
				return c;

			case SHOVE_F:
				c = lgetc(lx);
				if (c == EOF) {
					lex_state->shove.state = SHOVE_POST;
					continue;
				}

				return c;

			case SHOVE_POST:
				c = *lex_state->shove.post;
				if (c == '\0') {
					return EOF;
				}

				lex_state->shove.post++;
				return c;
			}
		}
	}
#endif

	static int
	parse(int (*f)(void *opaque), void *opaque,
		void (*entry)(struct fsm *, flags, lex_state, act_state, err),
		enum re_flags flags, int overlap,
		struct fsm *new, struct re_err *err, t_grp *g)
	{
		struct act_state  act_state_s;
		struct act_state *act_state;
		struct lex_state  lex_state_s;
		struct lex_state *lex_state;
		struct re_err dummy;

		struct LX_STATE *lx;

		assert(f != NULL);
		assert(entry != NULL);

		if (err == NULL) {
			err = &dummy;
		}

		lex_state    = &lex_state_s;
		lex_state->p = lex_state->a;

		lx = &lex_state->lx;

		LX_INIT(lx);

		lx->lgetc  = lgetc;
		lx->opaque = lex_state;

		lex_state->f       = f;
		lex_state->opaque  = opaque;

#ifdef PARSE_GROUP
/* XXX: information leak; i don't like breaking abstraction here. maybe pass in lgetc and lex_state->shove instead */
		if (entry == DIALECT_GROUP_ENTRY) {
			lex_state->shove.pre   = "[";
			lex_state->shove.post  = "]";
			lex_state->shove.state = SHOVE_PRE;

			lx->lgetc  = lshovec;
		}
#endif

		lex_state->buf.a   = NULL;
		lex_state->buf.len = 0;

		/* XXX: unneccessary since we're lexing from a string */
		/* (except for pushing "[" and "]" around ::group-$dialect) */
		lx->buf   = &lex_state->buf;
		lx->push  = CAT(LX_PREFIX, _dynpush);
		lx->pop   = CAT(LX_PREFIX, _dynpop);
		lx->clear = CAT(LX_PREFIX, _dynclear);
		lx->free  = CAT(LX_PREFIX, _dynfree);

		/* This is a workaround for ADVANCE_LEXER assuming a pointer */
		act_state = &act_state_s;
		act_state->g = g;

		act_state->overlap = overlap;
		act_state->matches = 0x0;
		act_state->nmatch  = 0;

		err->e = RE_ESUCCESS;

		ADVANCE_LEXER;
		entry(new, flags, lex_state, act_state, err);

		lx->free(lx);

		if (err->e != RE_ESUCCESS) {
			/* TODO: free internals allocated during parsing (are there any?) */
			goto error;
		}

		return 0;

	error:

		assert(err->e & RE_MARK);

		/*
		 * Some errors describe multiple tokens; for these, the start and end
		 * positions belong to potentially different tokens, and therefore need
		 * to be stored statefully (in act_state). These are all from
		 * non-recursive productions by design, and so a stack isn't needed.
		 *
		 * Lexical errors describe a problem with a single token; for these,
		 * the start and end positions belong to that token.
		 *
		 * Syntax errors occur at the first point the order of tokens is known
		 * to be incorrect, rather than describing a span of bytes. For these,
		 * the start of the next token is most relevant.
		 */

		switch (err->e) {
		case RE_EOVERLAP:  err->start = act_state->groupstart; err->end = act_state->groupend; break;
		case RE_ENEGRANGE: err->start = act_state->rangestart; err->end = act_state->rangeend; break;
		case RE_ENEGCOUNT: err->start = act_state->countstart; err->end = act_state->countend; break;

		case RE_EHEXRANGE:
		case RE_EOCTRANGE:
		case RE_ECOUNTRANGE:
			/*
			 * Lexical errors: These are always generated for the current token,
			 * so lx->start/end here is correct because ADVANCE_LEXER has
			 * not been called.
			 */
			mark(&err->start, &lx->start);
			mark(&err->end,   &lx->end);
			break;

		default:
			/*
			 * Due to LL(1) lookahead, lx->start/end is the next token.
			 * This is approximately correct as the position of an error,
			 * but to be exactly correct, we store the pos for the previous token.
			 * This is more visible when whitespace exists.
			 */
			err->start = act_state->synstart;
			err->end   = act_state->synstart; /* single point */
			break;
		}

		return -1;
	}

	struct fsm *
	DIALECT_COMP(int (*f)(void *opaque), void *opaque,
		const struct fsm_options *opt,
		enum re_flags flags, int overlap,
		struct re_err *err)
	{
		struct fsm *new;
		struct fsm_state *start;

		assert(f != NULL);

		new = fsm_new(opt);
		if (new == NULL) {
			return NULL;
		}

		start = fsm_addstate(new);
		if (start == NULL) {
			fsm_free(new);
			goto error;
		}

		fsm_setstart(new, start);

		if (-1 == parse(f, opaque, DIALECT_ENTRY, flags, overlap, new, err, NULL)) {
			fsm_free(new);
			return NULL;
		}

		return new;

	error:

		err->e = RE_EERRNO;

		return NULL;
	}

#ifdef PARSE_GROUP
	int
	DIALECT_GROUP(int (*f)(void *opaque), void *opaque,
		enum re_flags flags, int overlap,
		struct re_err *err, struct re_grp *g)
	{
		assert(f != NULL);
		assert(g != NULL);

		/*
		 * The ::group-$dialect production provides an entry point to the
		 * grammar where just a group is parsed and output as a bitmap,
		 * without constructing an NFA edge for each entry in the set.
		 *
		 * We use the same parse() function here so as to use the same
		 * act/lex_state setup as usual. The problem is that parse() expects
		 * the entry() callback to take no extra parameters, and so the
		 * ::group-$dialect production cannot output a :grp type. In other words,
		 * its generated function must have the same prototype as the usual
		 * grammar entry point, which of course does not output a :grp.
		 *
		 * So, we have a hacky workaround where ::group-$dialect calls a
		 * <stash-group> action which stashes the bitmap in act_state->g,
		 * which is set here to point to the caller's storage for g.
		 * This relies on the fact that ::group-$dialect need only store
		 * one group at a time, which suits us fine.
		 */

		if (-1 == parse(f, opaque, DIALECT_GROUP_ENTRY, flags, overlap, NULL, err, g)) {
			return -1;
		}

		return 0;
	}
#endif

@}, @{

@};

