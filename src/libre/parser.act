/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%prefixes%

	terminal = TOK_;
	function = p_;
	type     = t_;

%persistents%

	fsm       :fsm;
	flags     :flags;
	lex_state :lex_state;
	act_state :act_state;
	err       :err;

%maps%

%header% @{

	#include <assert.h>
	#include <limits.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <errno.h>
	#include <ctype.h>

	#include "libfsm/internal.h" /* XXX */

	#include <fsm/fsm.h>
	#include <fsm/bool.h>
	#include <fsm/pred.h>

	#include <re/re.h>

	#ifndef DIALECT
	#error DIALECT required
	#endif

	#define PASTE(a, b) a ## b
	#define CAT(a, b)   PASTE(a, b)

	#define LX_PREFIX CAT(lx_, DIALECT)

	#define LX_TOKEN   CAT(LX_PREFIX, _token)
	#define LX_STATE   CAT(LX_PREFIX, _lx)
	#define LX_NEXT    CAT(LX_PREFIX, _next)
	#define LX_INIT    CAT(LX_PREFIX, _init)

	#define DIALECT_COMP  CAT(comp_, DIALECT)

	/* XXX: get rid of this; use same %entry% for all grammars */
	#define DIALECT_ENTRY CAT(p_re__, DIALECT)

	#define TOK_CLASS__alnum  TOK_CLASS_ALNUM
	#define TOK_CLASS__alpha  TOK_CLASS_ALPHA
	#define TOK_CLASS__any    TOK_CLASS_ANY
	#define TOK_CLASS__ascii  TOK_CLASS_ASCII
	#define TOK_CLASS__blank  TOK_CLASS_BLANK
	#define TOK_CLASS__cntrl  TOK_CLASS_CNTRL
	#define TOK_CLASS__digit  TOK_CLASS_DIGIT
	#define TOK_CLASS__graph  TOK_CLASS_GRAPH
	#define TOK_CLASS__lower  TOK_CLASS_LOWER
	#define TOK_CLASS__print  TOK_CLASS_PRINT
	#define TOK_CLASS__punct  TOK_CLASS_PUNCT
	#define TOK_CLASS__space  TOK_CLASS_SPACE
	#define TOK_CLASS__spchr  TOK_CLASS_SPCHR
	#define TOK_CLASS__upper  TOK_CLASS_UPPER
	#define TOK_CLASS__word   TOK_CLASS_WORD
	#define TOK_CLASS__xdigit TOK_CLASS_XDIGIT

	#include "parser.h"
	#include "lexer.h"

	#include "../comp.h"
	#include "../../class.h"

	struct grp {
		struct fsm *set;
		struct fsm *dup;
	};

	struct flags {
		enum re_flags flags;
		struct flags *parent;
	};

	typedef uint32_t     t_char;
	typedef const char * t_class;
	typedef unsigned t_unsigned;
	typedef unsigned t_pred; /* TODO */

	typedef struct lx_pos t_pos;
	typedef struct fsm * t_fsm;
	typedef enum re_flags t_re__flags;
	typedef struct grp t_grp;

	struct act_state {
		enum LX_TOKEN lex_tok;
		enum LX_TOKEN lex_tok_save;
		int overlap; /* permit overlap in groups */

		/*
		 * Lexical position stored for syntax errors.
		 */
		struct re_pos synstart;
		struct re_pos synend;

		/*
		 * Lexical positions stored for errors which describe multiple tokens.
		 * We're able to store these without needing a stack, because these are
		 * non-recursive productions.
		 */
		struct re_pos groupstart; struct re_pos groupend;
		struct re_pos rangestart; struct re_pos rangeend;
		struct re_pos countstart; struct re_pos countend;
	};

	struct lex_state {
		struct LX_STATE lx;
		struct lx_dynbuf buf; /* XXX: unneccessary since we're lexing from a string */

		int (*f)(void *opaque);
		void *opaque;

		/* TODO: use lx's generated conveniences for the pattern buffer */
		char a[512];
		char *p;
	};

	#define CURRENT_TERMINAL (act_state->lex_tok)
	#define ERROR_TERMINAL   @$ERROR
	#define ADVANCE_LEXER    do { mark(&act_state->synstart, &lex_state->lx.start); \
	                              mark(&act_state->synend,   &lex_state->lx.end);   \
	                              act_state->lex_tok = LX_NEXT(&lex_state->lx); } while (0)
	#define SAVE_LEXER(tok)  do { act_state->lex_tok_save = act_state->lex_tok; \
	                              act_state->lex_tok = tok;                     } while (0)
	#define RESTORE_LEXER    do { act_state->lex_tok = act_state->lex_tok_save; } while (0)

	static void
	mark(struct re_pos *r, const struct lx_pos *pos)
	{
		assert(r != NULL);
		assert(pos != NULL);

		r->byte = pos->byte;
	}

	/* TODO: centralise perhaps */
	static void
	snprintdots(char *s, size_t sz, const char *msg)
	{
		size_t n;

		assert(s != NULL);
		assert(sz > 3);
		assert(msg != NULL);

		n = sprintf(s, "%.*s", (int) sz - 3 - 1, msg);
		if (n == sz - 3 - 1) {
			strcpy(s + sz, "...");
		}
	}

	/* TODO: centralise */
	/* XXX: escaping really depends on dialect */
	static const char *
	escchar(char *s, size_t sz, int c)
	{
		size_t i;

		const struct {
			int c;
			const char *s;
		} a[] = {
			{ '\\', "\\\\" },

			{ '^',  "\\^"  },
			{ '-',  "\\-"  },
			{ ']',  "\\]"  },
			{ '[',  "\\["  },

			{ '\f', "\\f"  },
			{ '\n', "\\n"  },
			{ '\r', "\\r"  },
			{ '\t', "\\t"  },
			{ '\v', "\\v"  }
		};

		assert(s != NULL);
		assert(sz >= 5);

		(void) sz;

		for (i = 0; i < sizeof a / sizeof *a; i++) {
			if (a[i].c == c) {
				return a[i].s;
			}
		}

		if (!isprint((unsigned char) c)) {
			sprintf(s, "\\x%02X", (unsigned char) c);
			return s;
		}

		sprintf(s, "%c", c);
		return s;
	}

	static int
	escputc(int c, FILE *f)
	{
		char s[5];

		return fputs(escchar(s, sizeof s, c), f);
	}

	static int
	utf8decode(const unsigned char *c, uint32_t *out)
	{
		uint32_t r = 0;
		int i, cb;

		if ((c[0] & 0x80) == 0) {
			*out = c[0];
			return 1;
		}

		if ((c[0] & 0xc0) == 0x80) {
			return 0;
		}

		if ((c[0] & 0xe0) == 0xc0) {
			cb = 1;
			r = c[0] & 0x1f;
		} else if ((c[0] & 0xf0) == 0xe0) {
			cb = 2;
			r = c[0] & 0x0f;
		} else if ((c[0] & 0xf8) == 0xf0) {
			cb = 3;
			r = c[0] & 0x07;
		} else {
			return 0;
		}

		for (i = 0; i < cb; i++) {
			if ((c[i + 1] & 0xc0) != 0x80) {
				return 0;
			}

			r <<= 6;
			r |= c[i + 1] & 0x3f;
		}

		*out = r;
		return 1;
	}

	static int
	utf8encode(uint32_t cp, unsigned char c[])
	{
		if (0xd800 <= cp && cp <= 0xdfff) {
			return 0;
		}

		if (cp <= 0x7f) {
			c[0] =  cp;
			return 1;
		}

		if (cp <= 0x7ff) {
			c[0] = (cp >>  6) + 192;
			c[1] = (cp  & 63) + 128;
			return 2;
		}

		if (cp <= 0xffff) {
			c[0] =  (cp >> 12) + 224;
			c[1] = ((cp >>  6) &  63) + 128;
			c[2] =  (cp  & 63) + 128;
			return 3;
		}

		if (cp <= 0x10ffff) {
			c[0] =  (cp >> 18) + 240;
			c[1] = ((cp >> 12) &  63) + 128;
			c[2] = ((cp >>  6) &  63) + 128;
			c[3] =  (cp  & 63) + 128;
			return 4;
		}

		return 0;
	}

	static int
	add_utf8(struct fsm *fsm,
		struct fsm_state *from, struct fsm_state *to, uint32_t c)
	{
		unsigned char utf8[4];
		size_t n = utf8encode(c, utf8);
		size_t i;

		if (n == 0) {
			return 0;
		}

		for (i = 0; i < n; i++) {
			struct fsm_state *s = (i == n - 1) ? to
			                                   : fsm_addstate(fsm);
			if (!s) {
				return 0;
			}
			if (!fsm_addedge_literal(fsm, from, s, utf8[i])) {
				return 0;
			}
			from = s;
		}

		return 1;
	}

	static int
	addedge_literal(struct fsm *fsm, enum re_flags flags,
		struct fsm_state *from, struct fsm_state *to, uint32_t c)
	{
		assert(fsm != NULL);
		assert(from != NULL);
		assert(to != NULL);

		/* TODO: casefolding */
		if ((unsigned char) c <= UCHAR_MAX && (flags & RE_ICASE)) {
			c = (unsigned char) c;

			if (!add_utf8(fsm, from, to, tolower(c))) {
				return 0;
			}

			if (!add_utf8(fsm, from, to, toupper(c))) {
				return 0;
			}
		} else {
			if (!add_utf8(fsm, from, to, c)) {
				return 0;
			}
		}

		return 1;
	}

	static int
	group_add(struct grp *g, enum re_flags flags, uint32_t c)
	{
		const struct fsm_state *p;
		struct fsm_state *start, *end;
		struct fsm *fsm;
		char a[5];
		char *s = a;
		unsigned n;

		assert(g != NULL);

		n = utf8encode(c, a);
		if (n == 0) {
			return -1;
		}
		a[n] = '\0';

		errno = 0;
		p = fsm_exec(g->set, fsm_sgetc, &s);
		if (p == NULL && errno != 0) {
			return -1;
		}

		if (p == NULL) {
			fsm = g->set;
		} else {
			fsm = g->dup;
		}

		start = fsm_getstart(fsm);
		assert(start != NULL);

		end = fsm_addstate(fsm);
		if (end == NULL) {
			return -1;
		}

		fsm_setend(fsm, end, 1);

		if (!addedge_literal(fsm, flags, start, end, c)) {
			return -1;
		}

		return 0;
	}

	static struct fsm *
	fsm_new_blank(const struct fsm_options *opt)
	{
		struct fsm *new;
		struct fsm_state *start;

		new = fsm_new(opt);
		if (new == NULL) {
			return NULL;
		}

		start = fsm_addstate(new);
		if (start == NULL) {
			goto error;
		}

		fsm_setstart(new, start);

		return new;

	error:

		fsm_free(new);

		return NULL;
	}

	/* TODO: centralise as fsm_unionxy() perhaps */
	static int
	fsm_unionxy(struct fsm *a, struct fsm *b, struct fsm_state *x, struct fsm_state *y)
	{
		struct fsm_state *sa, *sb;
		struct fsm_state *end;

		assert(a != NULL);
		assert(b != NULL);
		assert(x != NULL);
		assert(y != NULL);

		sa = fsm_getstart(a);
		sb = fsm_getstart(b);

		end = fsm_collate(b, fsm_isend);
		if (end == NULL) {
			return 0;
		}

		if (!fsm_merge(a, b)) {
			return 0;
		}

		fsm_setstart(a, sa);

		if (!fsm_addedge_epsilon(a, x, sb)) {
			return 0;
		}

		fsm_setend(a, end, 0);

		if (!fsm_addedge_epsilon(a, end, y)) {
			return 0;
		}

		return 1;
	}

	static struct fsm *
	fsm_new_any(const struct fsm_options *opt)
	{
		struct fsm_state *a, *b;
		struct fsm *new;

		assert(opt != NULL);

		new = fsm_new(opt);
		if (new == NULL) {
			return NULL;
		}

		a = fsm_addstate(new);
		if (a == NULL) {
			goto error;
		}

		b = fsm_addstate(new);
		if (b == NULL) {
			goto error;
		}

		/* TODO: provide as a class. for utf8, this would be /./ */
		if (!fsm_addedge_any(new, a, b)) {
			goto error;
		}

		fsm_setstart(new, a);
		fsm_setend(new, b, 1);

		return new;

	error:

		fsm_free(new);

		return NULL;
	}

	/* XXX: to go when dups show all spellings for group overlap */
	static const struct fsm_state *
	fsm_any(const struct fsm *fsm,
		int (*predicate)(const struct fsm *, const struct fsm_state *))
	{
		const struct fsm_state *s;

		assert(fsm != NULL);
		assert(predicate != NULL);

		for (s = fsm->sl; s != NULL; s = s->next) {
			if (!predicate(fsm, s)) {
				return s;
			}
		}

		return NULL;
	}

@}, @{

	#include <re/re.h>

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;

	typedef struct fsm * fsm;
	typedef struct fsm_state * t_fsm__state;
	typedef struct flags *flags;
	typedef struct re_err * err;

@};

%terminals%

	INVERT: () -> (c :char) = @{
		@c = '^';
	@};

	RANGE: () -> (c :char, start :pos, end :pos) = @{
		@c = '-';
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	OPENGROUP: () -> (start :pos, end :pos) = @{
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	CLOSEGROUP: () -> (c :char, start :pos, end :pos) = @{
		@c = ']';
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	OPENCOUNT: () -> (start :pos, end :pos) = @{
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	CLOSECOUNT: () -> (start :pos, end :pos) = @{
		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;
	@};

	CLASS_alnum:  () -> (fsm :fsm) = @{ @fsm = class_alnum_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_alpha:  () -> (fsm :fsm) = @{ @fsm = class_alpha_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_any:    () -> (fsm :fsm) = @{ @fsm = class_any_fsm(fsm->opt);    if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_ascii:  () -> (fsm :fsm) = @{ @fsm = class_ascii_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_blank:  () -> (fsm :fsm) = @{ @fsm = class_blank_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_cntrl:  () -> (fsm :fsm) = @{ @fsm = class_cntrl_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_digit:  () -> (fsm :fsm) = @{ @fsm = class_digit_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_graph:  () -> (fsm :fsm) = @{ @fsm = class_graph_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_lower:  () -> (fsm :fsm) = @{ @fsm = class_lower_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_print:  () -> (fsm :fsm) = @{ @fsm = class_print_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_punct:  () -> (fsm :fsm) = @{ @fsm = class_punct_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_space:  () -> (fsm :fsm) = @{ @fsm = class_space_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_spchr:  () -> (fsm :fsm) = @{ @fsm = class_spchr_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_upper:  () -> (fsm :fsm) = @{ @fsm = class_upper_fsm(fsm->opt);  if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_word:   () -> (fsm :fsm) = @{ @fsm = class_word_fsm(fsm->opt);   if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};
	CLASS_xdigit: () -> (fsm :fsm) = @{ @fsm = class_xdigit_fsm(fsm->opt); if (@fsm == NULL) { err->e = RE_EERRNO; @!; } @};

	ESC: () -> (c :char) = @{
		assert(lex_state->buf.a[0] == '\\');
		assert(lex_state->buf.a[1] != '\0');
		assert(lex_state->buf.a[2] == '\0');

		@c = lex_state->buf.a[1];

		switch (@c) {
		case 'f': @c = '\f'; break;
		case 'n': @c = '\n'; break;
		case 'r': @c = '\r'; break;
		case 't': @c = '\t'; break;
		case 'v': @c = '\v'; break;
		default:             break;
		}
	@};

	OCT: () -> (c :char, start :pos, end :pos) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\", 1));
		assert(strlen(lex_state->buf.a) >= 2);

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;

		errno = 0;

		u = strtoul(lex_state->buf.a + 1, &e, 8);

		if ((u == ULONG_MAX && errno == ERANGE) || u > UINT32_MAX) {
			err->e = RE_EOCTRANGE;
			snprintdots(err->esc, sizeof err->esc, lex_state->buf.a);
			@!;
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err->e = RE_EXESC;
			@!;
		}

		@c = (uint32_t) u;
	@};

	HEX: () -> (c :char, start :pos, end :pos) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\x", 2));
		assert(strlen(lex_state->buf.a) >= 3);

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;

		errno = 0;

		u = strtoul(lex_state->buf.a + 2, &e, 16);

		if ((u == ULONG_MAX && errno == ERANGE) || u > UINT32_MAX) {
			err->e = RE_EHEXRANGE;
			snprintdots(err->esc, sizeof err->esc, lex_state->buf.a);
			@!;
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err->e = RE_EXESC;
			@!;
		}

		@c = (uint32_t) u;
	@};

	CHAR: () -> (c :char, start :pos, end :pos) = @{
		/* the first byte may be '\x00' */
		assert(lex_state->buf.a[1] == '\0');

		@start = lex_state->lx.start;
		@end   = lex_state->lx.end;

		@c = lex_state->buf.a[0];
	@};

	START: () -> (p :pred) = @{
		switch (flags->flags & RE_ANCHOR) {
		case RE_TEXT:  @p = RE_SOT; break;
		case RE_MULTI: @p = RE_SOL; break;
		case RE_ZONE:  @p = RE_SOZ; break;

		default:
			/* TODO: raise error */
			@p = 0U;
		}
	@};

	END: () -> (p :pred) = @{
		switch (flags->flags & RE_ANCHOR) {
		case RE_TEXT:  @p = RE_EOT; break;
		case RE_MULTI: @p = RE_EOL; break;
		case RE_ZONE:  @p = RE_EOZ; break;

		default:
			/* TODO: raise error */
			@p = 0U;
		}
	@};

	COUNT: () -> (n :unsigned) = @{
		unsigned long u;
		char *e;

		u = strtoul(lex_state->buf.a, &e, 10);

		if ((u == ULONG_MAX && errno == ERANGE) || u > UINT_MAX) {
			err->e = RE_ECOUNTRANGE;
			snprintdots(err->esc, sizeof err->esc, lex_state->buf.a);
			@!;
		}

		if ((u == ULONG_MAX && errno != 0) || *e != '\0') {
			err->e = RE_EXCOUNT;
			@!;
		}

		@n = (unsigned int) u;
	@};

	FLAG_INSENSITIVE: () -> (flag :re_flags) = @{
		@flag = RE_ICASE;
	@};

%actions%

	/*
	 * These are parser actions common to all grammars provided by libre.
	 * Globs use only a few of the available actions; regexps use most.
	 *
	 * In some cases (e.g. counting) actions are centralised here for
	 * the sake of DRY, at the expense of slight overkill.
	 */

	<make-group>: () -> (g :grp) = @{
		@g.set = fsm_new_blank(fsm->opt);
		if (@g.set == NULL) {
			@!;
		}

		@g.dup = fsm_new_blank(fsm->opt);
		if (@g.dup == NULL) {
			fsm_free(@g.set);
			@!;
		}
	@};

	<invert-group>: (g :grp &) -> () = @{
		struct fsm *any;

		any = fsm_new_any(fsm->opt);
		if (any == NULL) {
			err->e = RE_EERRNO;
			@!;
		}

		@&g->set = fsm_subtract(any, @&g->set);
		if (@&g->set == NULL) {
			err->e = RE_EERRNO;
			@!;
		}

		/*
		 * Note we don't invert the dup set here; duplicates are always
		 * kept in the positive.
		 */
	@};

	<group-add-char>: (g :grp &, c :char) -> () = @{
		if (-1 == group_add(@&g, flags->flags, @c)) {
			err->e = RE_EERRNO;
			@!;
		}
	@};

	<group-add-class>: (g :grp &, f :fsm) -> () = @{
		struct fsm *q;
		int r;

		/* TODO: maybe it is worth using carryopaque, after the entire group is constructed */
		{
			struct fsm *a, *b;

			a = fsm_clone(@&g->set);
			if (a == NULL) {
				err->e = RE_EERRNO;
				@!;
			}

			b = fsm_clone(@f);
			if (b == NULL) {
				fsm_free(a);
				err->e = RE_EERRNO;
				@!;
			}

			q = fsm_intersect(a, b);
			if (q == NULL) {
				fsm_free(a);
				fsm_free(b);
				err->e = RE_EERRNO;
				@!;
			}

			r = fsm_empty(q);

			if (r == -1) {
				err->e = RE_EERRNO;
				@!;
			}
		}

		if (!r) {
			@&g->dup = fsm_union(@&g->dup, q);
			if (@&g->dup == NULL) {
				err->e = RE_EERRNO;
				@!;
			}
		} else {
			fsm_free(q);

			@&g->set = fsm_union(@&g->set, @f);
			if (@&g->set == NULL) {
				err->e = RE_EERRNO;
				@!;
			}

			/* we need a DFA here for sake of fsm_exec() identifying duplicates */
			if (!fsm_determinise(@&g->set)) {
				err->e = RE_EERRNO;
				@!;
			}
		}
	@};

	<group-add-range>: (g :grp &, a :char, b :char) -> () = @{
		uint32_t i;

		if (@b < @a) {
			char a[5], b[5];

			assert(sizeof err->set >= 1 + sizeof a + 1 + sizeof b + 1 + 1);

			sprintf(err->set, "%s-%s",
				escchar(a, sizeof a, @a), escchar(b, sizeof b, @b));
			err->e = RE_ENEGRANGE;
			@!;
		}

		for (i = @a; i <= @b; i++) {
			if (-1 == group_add(@&g, flags->flags, i)) {
				err->e = RE_EERRNO;
				@!;
			}
		}
	@};

	<group-to-states>: (g :grp &, x :fsm_state, y :fsm_state) -> () = @{
		int r;

		r = fsm_empty(@&g->dup);
		if (r == -1) {
			err->e = RE_EERRNO;
			@!;
		}

		if (!r) {
			const struct fsm_state *end;

			/* TODO: would like to show the original spelling verbatim, too */

			/* XXX: this is just one example; really I want to show the entire set */
			end = fsm_any(@&g->dup, fsm_isend);
			assert(end != NULL);

			if (-1 == fsm_example(@&g->dup, end, err->dup, sizeof err->dup)) {
				err->e = RE_EERRNO;
				@!;
			}

			/* XXX: to return when we can show minimal coverage again */
			strcpy(err->set, err->dup);

			err->e  = RE_EOVERLAP;
			@!;
		}

		if (!fsm_minimise(@&g->set)) {
			err->e = RE_EERRNO;
			@!;
		}

		if (!fsm_unionxy(fsm, @&g->set, @x, @y)) {
			err->e = RE_EERRNO;
			@!;
		}

		fsm_free(@&g->dup);
	@};


	/*
	 * The following regular expression fragments map to associated fsm states
	 * as follows (transitions written in .fsm format):
	 *
	 *  ab    add-concat:  1 -> 3 "a"; 3 -> 2 "b";
	 *  a|b   add-alt:     1 -> 2 "a"; 1 -> 2 "b";
	 *  (a)   add-sub:     1 -> 1a; 2a -> 2;
	 *  [abc] add-group:   1 -> 2 "a"; 1 -> 2 "b"; 1 -> 2 "c";
	 *  a     add-literal: 1 -> 1a; 2a -> 2;
	 *  .     add-any:     1 -> 2 ?;
	 *
	 * Each of these component parts has exactly one input (1) and exactly one
	 * output state (2).
	 * TODO: say that these correspond to "x" and "y"
	 * TODO: explain that these are stacklike
	 * TODO: update these comments
	 */

	<add-concat>: () -> (s :fsm_state) = @{
		@s = fsm_addstate(fsm);
		if (@s == NULL) {
			@!;
		}
	@};

	<add-epsilon>: (x :fsm_state, y: fsm_state) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			@!;
		}
	@};

	<add-pred>: (x :fsm_state, y :fsm_state, p :pred) -> () = @{
		assert(@x != NULL);
		assert(@y != NULL);

/* TODO:
		if (!fsm_addedge_predicate(fsm, @x, @y, @p)) {
			@!;
		}
*/
	@};

	<add-literal>: (x :fsm_state, y :fsm_state, c :char) -> () = @{
		assert(@x != NULL);
		assert(@y != NULL);

		/* TODO: check c is legal? */

		if (!addedge_literal(fsm, flags->flags, @x, @y, @c)) {
			@!;
		}
	@};

	<add-any>: (x :fsm_state, y :fsm_state) -> () = @{
		struct fsm *any;

		assert(@x != NULL);
		assert(@y != NULL);

		any = class_any_fsm(fsm->opt);
		if (any == NULL) {
			err->e = RE_EERRNO;
			@!;
		}

		if (!fsm_unionxy(fsm, any, @x, @y)) {
			err->e = RE_EERRNO;
			@!;
		}
	@};


	/*
	 * The following count repetition operators encapsulate regular expression
	 * fragments as follows (transitions written in .fsm format where 1a and 2a
	 * indicate the a'th occurance of the input and output states 1 and 2 from
	 * the fragment):
	 *
	 *  a{n} count-n:         8 -> 1a; 2a -> 1b; 2b -> ...a; ...b -> na; nb -> 9;
	 *  a?   count-0-or-1:    8 -> 1a; 2a -> 9; 8 -> 9;
	 *  a*   count-0-or-many: 8 -> 1a; 2a -> 9; 8 -> 9; 9 -> 8;
	 *  a+   count-1-or-many: 8 -> 1a; 2a -> 9;         9 -> 8;
	 *  a    count-1:         8 -> 1a; 2a -> 9;
	 *
	 * Each of these component parts has exactly one input (8) and exactly one
	 * output state (9). Between these states are an appropiate number of
	 * regex fragments as per <add-*> which begin and end (1) and (2). Each of
	 * these pairs is lettered a, b, ..., n for ease of identification.
	 *
	 * TODO: update for count-m-n
	 */

	<count-m-to-n>: (x :fsm_state, y :fsm_state &, m :unsigned, n :unsigned) -> () = @{
		unsigned i;
		struct fsm_state *a;
		struct fsm_state *b;

		if (@n < @m) {
			err->e = RE_ENEGCOUNT;
			err->m = @m;
			err->n = @n;
			@!;
		}

		if (@m == 0) {
			if (!fsm_addedge_epsilon(fsm, @x, @y)) {
				@!;
			}
		}

		b = @y;

		for (i = 1; i < @n; i++) {
			a = fsm_state_duplicatesubgraphx(fsm, @x, &b);
			if (a == NULL) {
				@!;
			}

			/* TODO: could elide this epsilon if fsm_state_duplicatesubgraphx()
			 * took an extra parameter giving it a m->new for the start state */
			if (!fsm_addedge_epsilon(fsm, @y, a)) {
				@!;
			}

			if (i >= @m) {
				if (!fsm_addedge_epsilon(fsm, @y, b)) {
					@!;
				}
			}

			@=y = b;
			@x = a;
		}
	@};

	<count-0-or-1>: (x :fsm_state, y :fsm_state) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			@!;
		}
	@};

	<count-0-or-many>: (x :fsm_state, y :fsm_state &) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			@!;
		}

		if (!fsm_addedge_epsilon(fsm, @y, @x)) {
			@!;
		}

		/* isolation guard */
		/* TODO: centralise */
		{
			struct fsm_state *z;

			z = fsm_addstate(fsm);
			if (z == NULL) {
				@!;
			}

			if (!fsm_addedge_epsilon(fsm, @y, z)) {
				@!;
			}

			@=y = z;
		}
	@};

	<count-1-or-many>: (x :fsm_state, y :fsm_state &) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @y, @x)) {
			@!;
		}

		/* isolation guard */
		/* TODO: centralise */
		{
			struct fsm_state *z;

			z = fsm_addstate(fsm);
			if (z == NULL) {
				@!;
			}

			if (!fsm_addedge_epsilon(fsm, @y, z)) {
				@!;
			}

			@=y = z;
		}
	@};

	<count-1>: (x :fsm_state, y :fsm_state) -> () = @{
		(void) @x;
		(void) @y;
	@};


	<push-flags>: () -> () = @{
		struct flags *n = malloc(sizeof *n);
		if (n == NULL) {
			@!;
		}
		n->parent = flags;
		n->flags = flags->flags;
		flags = n;
	@};

	<pop-flags>: () -> () = @{
		struct flags *t = flags->parent;
		assert(t != NULL);
		free(flags);
		flags = t;
	@};

	<set-flag>: (flag: re_flags) -> () = @{
		flags->flags |= @flag;
	@};

	<clear-flag>: (flag: re_flags) -> () = @{
		flags->flags &= ~@flag;
	@};


	<err-expected-term> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXTERM;
		}
		@!;
	@};

	<err-expected-count> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXCOUNT;
		}
		@!;
	@};

	<err-expected-atoms> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXATOMS;
		}
		@!;
	@};

	<err-expected-alts> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXALTS;
		}
		@!;
	@};

	<err-expected-range> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXRANGE;
		}
		@!;
	@};

	<err-expected-closegroup> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXCLOSEGROUP;
		}
		@!;
	@};

	<err-expected-groupbody> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXGROUPBODY;
		}
		@!;
	@};

	<err-unknown-flag> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EFLAG;
		}
		@!;
	@};

	<err-expected-closeflags> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXCLOSEFLAGS;
		}
		@!;
	@};

	<err-expected-eof> = @{
		if (err->e == RE_ESUCCESS) {
			err->e = RE_EXEOF;
		}
		@!;
	@};

	<mark-group>: (start :pos, end :pos) -> () = @{
		mark(&act_state->groupstart, &@start);
		mark(&act_state->groupend,   &@end);
	@};

	<mark-range>: (start :pos, end :pos) -> () = @{
		mark(&act_state->rangestart, &@start);
		mark(&act_state->rangeend,   &@end);
	@};

	<mark-count>: (start :pos, end :pos) -> () = @{
		mark(&act_state->countstart, &@start);
		mark(&act_state->countend,   &@end);
	@};

%trailer% @{

	static int
	lgetc(struct LX_STATE *lx)
	{
		struct lex_state *lex_state;

		assert(lx != NULL);
		assert(lx->opaque != NULL);

		lex_state = lx->opaque;

		assert(lex_state->f != NULL);

		return lex_state->f(lex_state->opaque);
	}

	static int
	parse(int (*f)(void *opaque), void *opaque,
		void (*entry)(struct fsm *, flags, lex_state, act_state, err,
			struct fsm_state *, struct fsm_state *),
		struct flags *flags, int overlap,
		struct fsm *new, struct re_err *err,
		struct fsm_state *x, struct fsm_state *y)
	{
		struct act_state  act_state_s;
		struct act_state *act_state;
		struct lex_state  lex_state_s;
		struct lex_state *lex_state;
		struct re_err dummy;

		struct LX_STATE *lx;

		assert(f != NULL);
		assert(entry != NULL);

		if (err == NULL) {
			err = &dummy;
		}

		lex_state    = &lex_state_s;
		lex_state->p = lex_state->a;

		lx = &lex_state->lx;

		LX_INIT(lx);

		lx->lgetc  = lgetc;
		lx->opaque = lex_state;

		lex_state->f       = f;
		lex_state->opaque  = opaque;

		lex_state->buf.a   = NULL;
		lex_state->buf.len = 0;

		/* XXX: unneccessary since we're lexing from a string */
		/* (except for pushing "[" and "]" around ::group-$dialect) */
		lx->buf   = &lex_state->buf;
		lx->push  = CAT(LX_PREFIX, _dynpush);
		lx->pop   = CAT(LX_PREFIX, _dynpop);
		lx->clear = CAT(LX_PREFIX, _dynclear);
		lx->free  = CAT(LX_PREFIX, _dynfree);

		/* This is a workaround for ADVANCE_LEXER assuming a pointer */
		act_state = &act_state_s;

		act_state->overlap = overlap;

		err->e = RE_ESUCCESS;

		ADVANCE_LEXER;
		entry(new, flags, lex_state, act_state, err, x, y);

		lx->free(lx);

		if (err->e != RE_ESUCCESS) {
			/* TODO: free internals allocated during parsing (are there any?) */
			goto error;
		}

		return 0;

	error:

		/*
		 * Some errors describe multiple tokens; for these, the start and end
		 * positions belong to potentially different tokens, and therefore need
		 * to be stored statefully (in act_state). These are all from
		 * non-recursive productions by design, and so a stack isn't needed.
		 *
		 * Lexical errors describe a problem with a single token; for these,
		 * the start and end positions belong to that token.
		 *
		 * Syntax errors occur at the first point the order of tokens is known
		 * to be incorrect, rather than describing a span of bytes. For these,
		 * the start of the next token is most relevant.
		 */

		switch (err->e) {
		case RE_EOVERLAP:  err->start = act_state->groupstart; err->end = act_state->groupend; break;
		case RE_ENEGRANGE: err->start = act_state->rangestart; err->end = act_state->rangeend; break;
		case RE_ENEGCOUNT: err->start = act_state->countstart; err->end = act_state->countend; break;

		case RE_EHEXRANGE:
		case RE_EOCTRANGE:
		case RE_ECOUNTRANGE:
			/*
			 * Lexical errors: These are always generated for the current token,
			 * so lx->start/end here is correct because ADVANCE_LEXER has
			 * not been called.
			 */
			mark(&err->start, &lx->start);
			mark(&err->end,   &lx->end);
			break;

		default:
			/*
			 * Due to LL(1) lookahead, lx->start/end is the next token.
			 * This is approximately correct as the position of an error,
			 * but to be exactly correct, we store the pos for the previous token.
			 * This is more visible when whitespace exists.
			 */
			err->start = act_state->synstart;
			err->end   = act_state->synstart; /* single point */
			break;
		}

		return -1;
	}

	struct fsm *
	DIALECT_COMP(int (*f)(void *opaque), void *opaque,
		const struct fsm_options *opt,
		enum re_flags flags, int overlap,
		struct re_err *err)
	{
		struct fsm *new;
		struct fsm_state *x, *y;
		struct flags top, *fl = &top;

		top.flags = flags;

		assert(f != NULL);

		new = fsm_new_blank(opt);
		if (new == NULL) {
			return NULL;
		}

		x = fsm_getstart(new);
		assert(x != NULL);

		y = fsm_addstate(new);
		if (y == NULL) {
			goto error;
		}

		fsm_setend(new, y, 1);

		if (-1 == parse(f, opaque, DIALECT_ENTRY, fl, overlap, new, err, x, y)) {
			goto error;
		}

		return new;

	error:

		fsm_free(new);

		return NULL;
	}

@}, @{

@};

